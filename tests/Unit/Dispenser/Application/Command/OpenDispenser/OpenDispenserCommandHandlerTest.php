<?php

namespace App\Tests\Unit\Dispenser\Application\Command\OpenDispenser;

use App\Dispenser\Application\Command\OpenDispenser\OpenDispenserCommandHandler;
use App\Dispenser\Domain\Bus\Command\OpenDispenser\OpenDispenserCommand;
use App\Dispenser\Domain\Entity\Dispenser;
use App\Dispenser\Domain\Persistence\Repository\DispenserRepositoryInterface;
use App\Shared\Domain\Bus\Event\EventBusInterface;
use App\Tests\Unit\Dispenser\Domain\Entity\DispenserMother;
use PHPUnit\Framework\TestCase;

class OpenDispenserCommandHandlerTest extends TestCase
{
    private OpenDispenserCommandHandler  $classUnderTest;
    private DispenserRepositoryInterface $dispenserRepositoryMock;
    private EventBusInterface            $eventBusMock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->dispenserRepositoryMock = $this->createMock(DispenserRepositoryInterface::class);
        $this->eventBusMock            = $this->createMock(EventBusInterface::class);

        $this->classUnderTest = new OpenDispenserCommandHandler(
            $this->dispenserRepositoryMock,
            $this->eventBusMock
        );
    }

    public function testInvokeShouldOpenDispenser(): void
    {
        $dispenser = DispenserMother::random();

        $this->dispenserRepositoryMock
            ->expects($this->once())
            ->method('findById')
            ->willReturn($dispenser);

        $this->classUnderTest->__invoke(
            new OpenDispenserCommand(
                dispenserId: 'anUuid',
                attendeeId : 1
            )
        );

        $this->assertTrue($dispenser->isOpen());
    }

    public function testOpenDispenserShouldThrowExceptionWhenDispenserNotFound(): void
    {
        $this->dispenserRepositoryMock
            ->expects($this->once())
            ->method('findById')
            ->willReturn(null);

        $this->expectException(\Exception::class);
        $this->expectExceptionMessage('Error opening dispenser');

        $this->classUnderTest->__invoke(
            new OpenDispenserCommand(
                dispenserId: 'anUuid',
                attendeeId : 1
            )
        );
    }
}
